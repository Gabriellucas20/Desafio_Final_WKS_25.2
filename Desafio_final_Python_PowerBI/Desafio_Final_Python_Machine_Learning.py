# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jpcjhLulDWJyG2IKqdOB25e7V8Z33SGB
"""

import pandas as pd
import numpy as np

# Passo 1: Extração (E) - Carregando o arquivo CSV
try:
    df = pd.read_csv('academia_redfit.csv')
    print("Dados carregados com sucesso!\n")
except FileNotFoundError:
    print("Erro: O arquivo 'academia_redfit.csv' não foi encontrado. Certifique-se de que ele está no mesmo diretório do seu script.")

# Exibindo as primeiras linhas para verificar
print("DataFrame Original:")
print(df.head())
print("\n" + "="*50 + "\n")

# Passo 2: Transformação (T) - Limpeza e padronização dos dados

# Padronizando a coluna 'estado'
df['estado'] = df['estado'].str.strip().str.upper()

# Convertendo 'data_inscricao' para o tipo de dado de data
df['data_matricula'] = pd.to_datetime(df['data_matricula'])

# Tratando valores ausentes e convertendo a coluna 'idade'
# 1. Encontrando a média da idade para preencher os valores ausentes
media_idade = df['idade'].mean()
# 2. Preenchendo os valores NaN com a média
df['idade'] = df['idade'].fillna(media_idade)
# 3. Convertendo a coluna para o tipo inteiro (int)
df['idade'] = df['idade'].astype(int)

# Tratando valores ausentes nas colunas de treino (preenchendo com a média)
colunas_treino = ['frequencia_semanal_treino', 'tempo_medio_exercicio', 'minutos_totais_semana']
for coluna in colunas_treino:
    media_coluna = df[coluna].mean()
    df[coluna] = df[coluna].fillna(media_coluna)

# --- Adicionando as novas colunas 'Evolucao_do_PGC' ---

# Criando a coluna 'Evolucao_do_PGC'
# A fórmula é: PGC_final - PGC_inicial
df['Evolucao_do_PGC'] = df['ultimo_PGC'] - df['primeiro_PGC']
# Preenchendo os valores NaN na evolução do PGC com 0
df['Evolucao_do_PGC'] = df['Evolucao_do_PGC'].fillna(0)


# Exibindo o DataFrame transformado para conferência
print("DataFrame Transformado:")
print(df.info())
print("\n" + "="*50 + "\n")
print(df.head())
print("\n" + "="*50 + "\n")

# Passo 3: Carga (L) - Salvando o DataFrame limpo em um novo arquivo
df.to_csv('clientes_limpo.csv', index=False)
print("Dados limpos e atualizados salvos com sucesso no arquivo 'clientes_limpo.csv'.")

#Salvamento da nova tabela]
# df.to_csv("academia_redfit.csv", index = False) # Removido ou comentado para evitar sobrescrever o arquivo original
from google.colab import files
files.download("clientes_limpo.csv")

import pandas as pd
import matplotlib.pyplot as plt

# Carregando o DataFrame limpo
try:
    df = pd.read_csv('clientes_limpo.csv')
    print("DataFrame 'clientes_limpo.csv' carregado com sucesso!\n")
except FileNotFoundError:
    print("Erro: O arquivo 'clientes_limpo.csv' não foi encontrado. Por favor, verifique o nome e o diretório.")
    exit()

# Definindo o estilo dos gráficos para melhor visualização
plt.style.use('seaborn-v0_8-whitegrid')

distribuicao_por_estado = df['estado'].value_counts()

plt.figure(figsize=(10, 6))
distribuicao_por_estado.plot(kind='bar', color='skyblue')
plt.title('Distribuição de Clientes por Estado', fontsize=16)
plt.xlabel('Estado', fontsize=12)
plt.ylabel('Número de Clientes', fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
plt.hist(df['idade'], bins=10, color='lightgreen', edgecolor='black')
plt.title('Distribuição da Idade dos Clientes', fontsize=16)
plt.xlabel('Idade', fontsize=12)
plt.ylabel('Frequência', fontsize=12)
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np

# Carregando o DataFrame limpo que criamos na etapa anterior
try:
    df = pd.read_csv('clientes_limpo.csv')
    print("DataFrame 'clientes_limpo.csv' carregado com sucesso!\n")
except FileNotFoundError:
    print("Erro: O arquivo 'clientes_limpo.csv' não foi encontrado.")
    exit()

# Definindo as condições para cada categoria
condicoes = [
    (df['frequencia_semanal_treino'] > 5) & (df['tempo_medio_exercicio'] > 60),
    (df['frequencia_semanal_treino'] > 3) & (df['minutos_totais_semana'] > 150)
]

# Definindo os valores correspondentes para cada condição
valores = ['Atleta', 'Ativo']

# Criando a nova coluna 'nivel_atividade' usando np.select
df['nivel_atividade'] = np.select(condicoes, valores, default='Sedentário')

# Exibindo as primeiras linhas para verificar a nova coluna
print("DataFrame com a nova coluna 'nivel_atividade':")
print(df.head())
print("\n" + "="*50 + "\n")
print(df['nivel_atividade'].value_counts())

# Opcional: Salvar o DataFrame atualizado para a próxima etapa
df.to_csv('clientes_limpo_com_target.csv', index=False)
print("\nDataFrame atualizado salvo como 'clientes_limpo_com_target.csv'.")

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

# Carregando o DataFrame com a variável alvo
try:
    df = pd.read_csv('clientes_limpo_com_target.csv')
    print("DataFrame com a variável alvo carregado com sucesso!\n")
except FileNotFoundError:
    print("Erro: O arquivo 'clientes_limpo_com_target.csv' não foi encontrado.")
    exit()

# Passo 1: Separar as características (X) da variável alvo (y)
X = df.drop(columns=['nivel_atividade', 'data_matricula', 'estado'])
y = df['nivel_atividade']

# Passo 2: Codificar variáveis categóricas
colunas_categoricas = ['sexo', 'tipo_atividade', 'possui_nutricionista']
encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')
X_encoded = encoder.fit_transform(X[colunas_categoricas])
X_encoded_df = pd.DataFrame(X_encoded, columns=encoder.get_feature_names_out(colunas_categoricas))
X = X.drop(columns=colunas_categoricas)
X = pd.concat([X, X_encoded_df], axis=1)

# Passo 3: Dividir os dados em conjuntos de treino e teste
# 80% para treino, 20% para teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("\nDados divididos:")
print(f"Conjunto de Treino: {X_train.shape[0]} amostras")
print(f"Conjunto de Teste: {X_test.shape[0]} amostras")

# Passo 4: Treinar o modelo
# Criando uma instância do modelo Random Forest
modelo = RandomForestClassifier(n_estimators=100, random_state=42)

# Treinando o modelo com os dados de treino
modelo.fit(X_train, y_train)

print("\nModelo de Random Forest treinado com sucesso!")

# Passo 5: Avaliar o modelo no conjunto de teste
y_pred = modelo.predict(X_test)

# Exibindo as métricas de avaliação
print("\nMétricas de Avaliação do Modelo:")
print("Acurácia:", accuracy_score(y_test, y_pred))
print("\nRelatório de Classificação:")
print(classification_report(y_test, y_pred))

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

# ====================================================================
# PASSO 1: CARREGANDO OS DADOS
# ====================================================================

try:
    df = pd.read_csv('clientes_limpo.csv')
    print("DataFrame 'clientes_limpo.csv' carregado com sucesso!\n")
except FileNotFoundError:
    print("Erro: O arquivo 'clientes_limpo.csv' não foi encontrado. Verifique o nome e o diretório.")
    exit()

# ====================================================================
# PASSO 2: ANÁLISE EXPLORATÓRIA E VISUALIZAÇÃO DE DADOS (EDA)
# ====================================================================

# Definindo o estilo dos gráficos para melhor visualização
plt.style.use('seaborn-v0_8-whitegrid')

# Visualização 1: Distribuição de Clientes por Estado (Gráfico de Barras)
distribuicao_por_estado = df['estado'].value_counts()
plt.figure(figsize=(10, 6))
distribuicao_por_estado.plot(kind='bar', color='skyblue')
plt.title('Distribuição de Clientes por Estado', fontsize=16)
plt.xlabel('Estado', fontsize=12)
plt.ylabel('Número de Clientes', fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Visualização 2: Distribuição de Idade dos Clientes (Histograma)
plt.figure(figsize=(10, 6))
plt.hist(df['idade'], bins=10, color='lightgreen', edgecolor='black')
plt.title('Distribuição da Idade dos Clientes', fontsize=16)
plt.xlabel('Idade', fontsize=12)
plt.ylabel('Frequência', fontsize=12)
plt.tight_layout()
plt.show()

# ====================================================================
# PASSO 3: CONSTRUÇÃO E AVALIAÇÃO DO MODELO DE MACHINE LEARNING
# ====================================================================

# 3.1 - Criação da Variável Alvo 'nivel_atividade'
condicoes = [
    (df['frequencia_semanal_treino'] > 5) & (df['tempo_medio_exercicio'] > 60),
    (df['frequencia_semanal_treino'] > 3) & (df['minutos_totais_semana'] > 150)
]
valores = ['Atleta', 'Ativo']
df['nivel_atividade'] = np.select(condicoes, valores, default='Sedentário')
print("Variável 'nivel_atividade' criada com sucesso.\n")

# 3.2 - Preparação dos Dados para o Modelo
X = df.drop(columns=['nivel_atividade', 'data_matricula', 'estado'])
y = df['nivel_atividade']

# Codificação de variáveis categóricas
colunas_categoricas = ['sexo', 'tipo_atividade', 'possui_nutricionista']
encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')
X_encoded = encoder.fit_transform(X[colunas_categoricas])
X_encoded_df = pd.DataFrame(X_encoded, columns=encoder.get_feature_names_out(colunas_categoricas))
X = X.drop(columns=colunas_categoricas)
X = pd.concat([X, X_encoded_df], axis=1)

# Divisão dos dados em treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 3.3 - Treinamento do Modelo
modelo = RandomForestClassifier(n_estimators=100, random_state=42)
modelo.fit(X_train, y_train)
print("Modelo de Random Forest treinado com sucesso!")

# 3.4 - Avaliação do Modelo
y_pred = modelo.predict(X_test)
print("\nMétricas de Avaliação do Modelo:")
print("Acurácia:", accuracy_score(y_test, y_pred))
print("\nRelatório de Classificação:")
print(classification_report(y_test, y_pred))